# Configure Environment Script
# This PowerShell script helps configure the .env file for development on Windows

param (
    [string]$OllamaUrl = "http://localhost:11434",
    [string]$QdrantUrl = "http://localhost:6333",
    [string]$OpenWebUIUrl = "http://localhost:8080",
    [string]$Model = "llama3"
)

Write-Host "Document Scanner - Environment Configuration" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Set paths
$appPath = "C:\Users\Administrator\source\repos\document-scanner-service"
$envPath = "$appPath\.env"
$envExamplePath = "$appPath\.env.example"

# Check if .env file exists, if not create from example
if (-not (Test-Path $envPath)) {
    if (Test-Path $envExamplePath) {
        Write-Host "Creating .env file from .env.example..." -ForegroundColor Yellow
        Copy-Item -Path $envExamplePath -Destination $envPath
    } else {
        Write-Host "Creating basic .env file..." -ForegroundColor Yellow
        @"
# Document Scanner Service Configuration
# Generated by configure-env.ps1 script

# Server Configuration
SERVER_PORT=3000
SERVER_HTTPS=false

# SMB Configuration
SMB_HOST=//localhost/share
SMB_USERNAME=user
SMB_PASSWORD=password
SMB_MOUNT_POINT=/mnt/smb_docs

# Scanning Configuration
SCAN_INTERVAL=30
SCAN_EXTENSIONS=.pdf,.doc,.docx,.txt
SCAN_MAX_FILE_SIZE=10485760

# Ollama Configuration
OLLAMA_URL=$OllamaUrl
LLM_MODEL=$Model
LLM_TEMPERATURE=0.7
LLM_MAX_TOKENS=2000

# Qdrant Configuration
QDRANT_URL=$QdrantUrl
QDRANT_COLLECTION=documents
QDRANT_VECTOR_SIZE=384

# OpenWebUI Configuration
OPENWEBUI_URL=$OpenWebUIUrl
OPENWEBUI_FUNCTION_ENABLED=true

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=logs/app.log

# Development Mode
NODE_ENV=development
"@ | Out-File -FilePath $envPath -Encoding utf8
    }
}

# Function to update environment variables
function Update-EnvVariable {
    param (
        [string]$VarName,
        [string]$VarValue
    )
    
    $content = Get-Content -Path $envPath -Raw
    
    # Check if variable exists
    if ($content -match "(?m)^$VarName=(.*)$") {
        Write-Host "Updating $VarName..." -ForegroundColor Yellow
        $content = $content -replace "(?m)^$VarName=(.*)$", "$VarName=$VarValue"
    } else {
        Write-Host "Adding $VarName..." -ForegroundColor Green
        $content = "$content`n$VarName=$VarValue"
    }
    
    $content | Out-File -FilePath $envPath -Encoding utf8
}

# Update environment variables
Write-Host "`nConfiguring environment variables..." -ForegroundColor Yellow
Update-EnvVariable -VarName "OLLAMA_URL" -VarValue $OllamaUrl
Update-EnvVariable -VarName "QDRANT_URL" -VarValue $QdrantUrl
Update-EnvVariable -VarName "OPENWEBUI_URL" -VarValue $OpenWebUIUrl
Update-EnvVariable -VarName "LLM_MODEL" -VarValue $Model

# Check Ollama connection
Write-Host "`nChecking Ollama connection..." -ForegroundColor Yellow
try {
    $ollamaResponse = Invoke-WebRequest -Uri "$OllamaUrl/api/tags" -Method GET -ErrorAction Stop
    $ollamaModels = ($ollamaResponse.Content | ConvertFrom-Json).models
    
    if ($ollamaModels.Count -gt 0) {
        Write-Host "Connected to Ollama! Available models:" -ForegroundColor Green
        foreach ($model in $ollamaModels) {
            Write-Host "- $($model.name)" -ForegroundColor White
        }
        
        # Check if specified model is available
        $modelAvailable = $ollamaModels | Where-Object { $_.name -eq $Model }
        if (-not $modelAvailable) {
            Write-Host "`nWARNING: Specified model '$Model' is not available in Ollama" -ForegroundColor Red
            Write-Host "You might need to pull it first with: ollama pull $Model" -ForegroundColor Yellow
        }
    } else {
        Write-Host "Connected to Ollama, but no models found" -ForegroundColor Yellow
    }
} catch {
    Write-Host "Failed to connect to Ollama at $OllamaUrl" -ForegroundColor Red
    Write-Host "Error: $_" -ForegroundColor Red
}

# Check Qdrant connection
Write-Host "`nChecking Qdrant connection..." -ForegroundColor Yellow
try {
    $qdrantResponse = Invoke-WebRequest -Uri "$QdrantUrl/collections" -Method GET -ErrorAction Stop
    $qdrantCollections = ($qdrantResponse.Content | ConvertFrom-Json).result.collections
    
    if ($qdrantCollections.Count -gt 0) {
        Write-Host "Connected to Qdrant! Available collections:" -ForegroundColor Green
        foreach ($collection in $qdrantCollections) {
            Write-Host "- $($collection.name)" -ForegroundColor White
        }
    } else {
        Write-Host "Connected to Qdrant, but no collections found" -ForegroundColor Yellow
    }
} catch {
    Write-Host "Failed to connect to Qdrant at $QdrantUrl" -ForegroundColor Red
    Write-Host "Error: $_" -ForegroundColor Red
}

# Configuration complete
Write-Host "`nEnvironment configuration complete!" -ForegroundColor Green
Write-Host "Your .env file is located at:" -ForegroundColor Yellow
Write-Host $envPath -ForegroundColor White
Write-Host "`nRun the following to start the service:" -ForegroundColor Yellow
Write-Host ".\scripts\start-document-scanner.ps1" -ForegroundColor White
