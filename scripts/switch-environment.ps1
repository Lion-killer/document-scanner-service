# Switch Environment Script
# This PowerShell script helps switch between development (Windows) and production (Debian) environments

param(
    [string]$Environment = "dev", # Options: "dev" or "prod"
    [switch]$Force = $false,      # Force the switch without confirmation
    [switch]$Backup = $true,      # Backup current configuration
    [switch]$Restore = $false,    # Restore previous configuration
    [string]$BackupName = ""      # Specific backup to restore
)

Write-Host "Document Scanner - Environment Switcher" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

# Set paths
$appPath = "C:\Users\Administrator\source\repos\document-scanner-service"
$envPath = "$appPath\.env"
$envDevPath = "$appPath\.env.windows"
$envProdPath = "$appPath\.env.debian"
$backupDir = "$appPath\config-backups"

# Ensure backup directory exists
if (-not (Test-Path $backupDir)) {
    New-Item -Path $backupDir -ItemType Directory | Out-Null
    Write-Host "Created config backups directory" -ForegroundColor Yellow
}

# Function to backup current configuration
function Backup-Configuration {
    param (
        [string]$Label = ""
    )
    
    if (-not (Test-Path $envPath)) {
        Write-Host "No .env file found to backup" -ForegroundColor Yellow
        return
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    
    if ($Label) {
        $backupFileName = "env_backup_${Label}_${timestamp}.env"
    } else {
        $backupFileName = "env_backup_${timestamp}.env"
    }
    
    $backupPath = "$backupDir\$backupFileName"
    
    Copy-Item -Path $envPath -Destination $backupPath
    Write-Host "Configuration backed up to $backupPath" -ForegroundColor Green
    
    return $backupPath
}

# Function to restore configuration from backup
function Restore-Configuration {
    param (
        [string]$BackupName = ""
    )
    
    # If no specific backup name provided, list available backups
    if (-not $BackupName) {
        $backups = Get-ChildItem -Path $backupDir -Filter "env_backup_*.env" | Sort-Object LastWriteTime -Descending
        
        if ($backups.Count -eq 0) {
            Write-Host "No backups found" -ForegroundColor Red
            return $false
        }
        
        Write-Host "Available backups:" -ForegroundColor Yellow
        for ($i = 0; $i -lt [Math]::Min($backups.Count, 10); $i++) {
            $backup = $backups[$i]
            $date = $backup.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
            Write-Host "[$i] $($backup.Name) ($date)" -ForegroundColor White
        }
        
        $selection = Read-Host "Enter backup number to restore (or 'c' to cancel)"
        
        if ($selection -eq 'c') {
            return $false
        }
        
        if (-not [int]::TryParse($selection, [ref]$null) -or [int]$selection -lt 0 -or [int]$selection -ge $backups.Count) {
            Write-Host "Invalid selection" -ForegroundColor Red
            return $false
        }
        
        $backupPath = $backups[[int]$selection].FullName
    } else {
        $backupPath = "$backupDir\$BackupName"
        
        if (-not (Test-Path $backupPath)) {
            Write-Host "Backup file not found: $backupPath" -ForegroundColor Red
            return $false
        }
    }
    
    # Backup current configuration first
    if ($Backup) {
        Backup-Configuration -Label "pre_restore"
    }
    
    # Restore the backup
    Copy-Item -Path $backupPath -Destination $envPath -Force
    Write-Host "Configuration restored from $backupPath" -ForegroundColor Green
    return $true
}

# Handle restore request
if ($Restore) {
    $restored = Restore-Configuration -BackupName $BackupName
    
    if ($restored) {
        Write-Host "Configuration restored successfully" -ForegroundColor Green
    } else {
        Write-Host "Configuration restore cancelled or failed" -ForegroundColor Yellow
    }
    exit
}

# Validate environment parameter
if ($Environment -ne "dev" -and $Environment -ne "prod") {
    Write-Host "Invalid environment parameter. Use 'dev' for Windows development or 'prod' for Debian production" -ForegroundColor Red
    exit 1
}

# Check if environment-specific config file exists
$sourceEnvPath = if ($Environment -eq "dev") { $envDevPath } else { $envProdPath }

if (-not (Test-Path $sourceEnvPath)) {
    # If not found, create a template
    Write-Host "Environment configuration file not found: $sourceEnvPath" -ForegroundColor Yellow
    
    if ($Environment -eq "dev") {
        # Windows development template
        @"
# Document Scanner Service - WINDOWS DEVELOPMENT Configuration
# Generated by switch-environment.ps1

# Server Configuration
SERVER_PORT=3000
SERVER_HTTPS=false

# SMB Configuration
SMB_HOST=//localhost/share
SMB_USERNAME=user
SMB_PASSWORD=password
SMB_MOUNT_POINT=C:/temp/smb_docs

# Scanning Configuration
SCAN_INTERVAL=30
SCAN_EXTENSIONS=.pdf,.doc,.docx,.txt
SCAN_MAX_FILE_SIZE=10485760

# Ollama Configuration
OLLAMA_URL=http://localhost:11434
LLM_MODEL=llama3
LLM_TEMPERATURE=0.7
LLM_MAX_TOKENS=2000

# Qdrant Configuration
QDRANT_URL=http://localhost:6333
QDRANT_COLLECTION=documents
QDRANT_VECTOR_SIZE=384

# OpenWebUI Configuration
OPENWEBUI_URL=http://localhost:8080
OPENWEBUI_FUNCTION_ENABLED=true

# Logging Configuration
LOG_LEVEL=debug
LOG_FILE=logs/app.log

# Development Mode
NODE_ENV=development
"@ | Out-File -FilePath $envDevPath -Encoding utf8
    } else {
        # Debian production template
        @"
# Document Scanner Service - DEBIAN PRODUCTION Configuration
# Generated by switch-environment.ps1

# Server Configuration
SERVER_PORT=3000
SERVER_HTTPS=false

# SMB Configuration
SMB_HOST=//nas.local/documents
SMB_USERNAME=docscanner
SMB_PASSWORD=password_here
SMB_MOUNT_POINT=/mnt/smb_docs

# Scanning Configuration
SCAN_INTERVAL=30
SCAN_EXTENSIONS=.pdf,.doc,.docx,.txt
SCAN_MAX_FILE_SIZE=10485760

# Ollama Configuration
OLLAMA_URL=http://localhost:11434
LLM_MODEL=llama3
LLM_TEMPERATURE=0.7
LLM_MAX_TOKENS=2000

# Qdrant Configuration
QDRANT_URL=http://localhost:6333
QDRANT_COLLECTION=documents
QDRANT_VECTOR_SIZE=384

# OpenWebUI Configuration
OPENWEBUI_URL=http://localhost:8080
OPENWEBUI_FUNCTION_ENABLED=true

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=/var/log/docscanner/app.log

# Production Mode
NODE_ENV=production
"@ | Out-File -FilePath $envProdPath -Encoding utf8
    }
    
    Write-Host "Created template $sourceEnvPath" -ForegroundColor Green
    Write-Host "Please edit this file with your actual configuration before switching to this environment." -ForegroundColor Yellow
    
    $editTemplate = Read-Host "Would you like to edit the template now? (y/n)"
    if ($editTemplate -eq 'y') {
        Start-Process -FilePath "notepad.exe" -ArgumentList $sourceEnvPath
        Write-Host "Please run this script again after editing the template." -ForegroundColor Yellow
        exit
    }
}

# Confirm switch
if (-not $Force) {
    Write-Host "`nYou are about to switch to the $(if ($Environment -eq 'dev') {'WINDOWS DEVELOPMENT'} else {'DEBIAN PRODUCTION'}) environment." -ForegroundColor Yellow
    $confirm = Read-Host "Do you want to continue? (y/n)"
    
    if ($confirm -ne 'y') {
        Write-Host "Operation cancelled" -ForegroundColor Red
        exit
    }
}

# Backup current configuration
if ($Backup -and (Test-Path $envPath)) {
    Backup-Configuration -Label $Environment
}

# Switch environment
try {
    Copy-Item -Path $sourceEnvPath -Destination $envPath -Force
    
    Write-Host "`nSwitched to $(if ($Environment -eq 'dev') {'WINDOWS DEVELOPMENT'} else {'DEBIAN PRODUCTION'}) environment." -ForegroundColor Green
    
    # Restart services option
    $restart = Read-Host "Would you like to restart the Document Scanner service now? (y/n)"
    
    if ($restart -eq 'y') {
        # Stop any existing instances
        $appProcess = Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*document-scanner*" }
        
        if ($appProcess) {
            Write-Host "Stopping existing service..." -ForegroundColor Yellow
            Stop-Process -Id $appProcess.Id -Force
            Start-Sleep -Seconds 2
        }
        
        # Start the service with the new configuration
        Write-Host "Starting service with new configuration..." -ForegroundColor Green
        Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "Set-Location '$appPath'; npm start"
    }
    
} catch {
    Write-Host "Error switching environment: $_" -ForegroundColor Red
    exit 1
}

Write-Host "`nEnvironment switch completed!" -ForegroundColor Cyan
